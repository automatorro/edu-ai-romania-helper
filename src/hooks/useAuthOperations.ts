
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useEmailConfirmation } from '@/hooks/useEmailConfirmation';
import type { AuthError, User } from '@/types/auth';

export const useAuthOperations = () => {
  const { toast } = useToast();
  const { sendConfirmationEmail } = useEmailConfirmation();

  const login = async (email: string, password: string) => {
    try {
      console.log('üîê Starting login for:', email);
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;
      console.log('‚úÖ Login successful for:', email);
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå Login error:', authError);
      toast({
        title: "Eroare la autentificare",
        description: authError.message || "Email sau parolƒÉ incorectƒÉ.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const register = async (email: string, password: string, name: string, userType: User['userType']) => {
    try {
      console.log('üìù Starting registration...');
      console.log('üìß Email:', email);
      console.log('üë§ Name:', name);
      console.log('üè∑Ô∏è User type:', userType);
      
      // SimplificƒÉm - nu trimitem email de confirmare automat
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: name,
            user_type: userType,
            name: name
          }
          // EliminƒÉm emailRedirectTo deocamdatƒÉ pentru simplificare
        }
      });

      console.log('üìä Registration response data:', data);
      console.log('‚ùó Registration response error:', error);

      if (error) {
        console.error('‚ùå Registration error details:', error);
        throw error;
      }

      if (data.user) {
        console.log('‚úÖ User created successfully:', data.user.id);
        
        // √éncercƒÉm sƒÉ trimitem email de confirmare manual doar dacƒÉ utilizatorul a fost creat
        try {
          await sendConfirmationEmail(email, name);
          console.log('üì® Confirmation email sent');
        } catch (emailError) {
          console.error('‚ö†Ô∏è Email sending failed, but user was created:', emailError);
        }
        
        toast({
          title: "Cont creat cu succes!",
          description: "VerificƒÉ email-ul pentru a-»õi confirma contul.",
        });
      }
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå Registration error:', authError);
      
      let errorMessage = "Nu am putut crea contul. √éncearcƒÉ din nou.";
      
      if (authError.message?.includes('already registered')) {
        errorMessage = "Acest email este deja √Ænregistrat. √éncearcƒÉ sƒÉ te autentifici.";
      } else if (authError.message?.includes('Database error')) {
        errorMessage = "Eroare de bazƒÉ de date. Te rugƒÉm sƒÉ √Æncerci din nou √Æn c√¢teva momente.";
      } else if (authError.message?.includes('User already registered')) {
        errorMessage = "Acest email este deja √Ænregistrat. √éncearcƒÉ sƒÉ te autentifici.";
      }
      
      toast({
        title: "Eroare la √Ænregistrare",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    }
  };

  const logout = async () => {
    try {
      console.log('üö™ Logging out user...');
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      toast({
        title: "Delogare reu»ôitƒÉ",
        description: "La revedere!",
      });
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå Logout error:', authError);
      toast({
        title: "Eroare",
        description: authError.message || "Eroare la delogare.",
        variant: "destructive",
      });
    }
  };

  const loginWithGoogle = async () => {
    try {
      console.log('üîç Starting Google OAuth...');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: window.location.origin + '/dashboard',
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });

      if (error) throw error;
      console.log('‚úÖ Google OAuth initiated successfully');
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå Google login error:', authError);
      toast({
        title: "Eroare",
        description: authError.message || "Nu am putut conecta cu Google.",
        variant: "destructive",
      });
    }
  };

  const loginWithFacebook = async () => {
    try {
      console.log('üìò Starting Facebook OAuth...');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'facebook',
        options: {
          redirectTo: window.location.origin + '/dashboard'
        }
      });

      if (error) throw error;
      console.log('‚úÖ Facebook OAuth initiated successfully');
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå Facebook login error:', authError);
      toast({
        title: "Eroare",
        description: authError.message || "Nu am putut conecta cu Facebook.",
        variant: "destructive",
      });
    }
  };

  const loginWithGithub = async () => {
    try {
      console.log('üê± Starting GitHub OAuth...');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: window.location.origin + '/dashboard'
        }
      });

      if (error) throw error;
      console.log('‚úÖ GitHub OAuth initiated successfully');
    } catch (error) {
      const authError = error as AuthError;
      console.error('‚ùå GitHub login error:', authError);
      toast({
        title: "Eroare",
        description: authError.message || "Nu am putut conecta cu GitHub.",
        variant: "destructive",
      });
    }
  };

  return {
    login,
    loginWithGoogle,
    loginWithFacebook,
    loginWithGithub,
    register,
    logout
  };
};
